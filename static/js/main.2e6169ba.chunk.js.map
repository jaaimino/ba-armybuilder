{"version":3,"sources":["styles/style.js","styles/home.style.js","routes/Home.js","styles/exampleComponent.style.js","datalayer/api.js","routes/Factions.js","routes/Units.js","components/UnitCard/UnitCard.js","routes/List.js","styles/pageNotFound.style.js","routes/PageNotFound.js","components/Breadcrumbs/Breadcrumbs.js","components/MainNav/MainNav.js","styles/app.style.js","serviceWorker.js","index.js","App.js"],"names":["link","normal","borderBottom","hover","color","active","touchActive","focusFromTab","outline","outlineOffset","touchActiveTapOnly","childLink","Object","keys","forEach","key","concat","slice","toUpperCase","style","p","margin","lineHeight","Code","_ref","children","react_default","a","createElement","fontFamily","fontSize","paddingLeft","s","create","main","padding","Home","DataContext","React","createContext","getUnitsByType","faction","type","values","factions","units","Data","getFaction","id","getFactions","getRule","name","rules","getResolvedUnitsByType","map","unit","objectSpread","models","get","model","weapon","weapons","undefined","Factions","Consumer","data","console","log","Container","Row","className","Col","sm","height","border","display","alignItems","justifyContent","tag","RRNavLink","exact","to","Component","contextType","Units","factionName","this","props","match","params","getUnits","UnitCard","JSON","stringify","count","List","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","prevState","modal","selectedUnit","selectUnit","renderAddHQ","state","Modal","isOpen","ModalHeader","ModalBody","UnitCard_UnitCard","toConsumableArray","onClick","ModalFooter","Button","_this2","PageNotFound","location","style_Code","pathname","breadCrumbTitles","","finland","BreadcrumbsItem","title","url","split","Link","assign","isExact","Route","path","component","Breadcrumbs","MainNav","bind","assertThisInitialized","Navbar","light","expand","NavbarBrand","activeClassName","NavbarToggler","Collapse","navbar","Nav","NavItem","es_NavLink","breadcrumbs","Boolean","window","hostname","ReactDOM","render","BrowserRouter","basename","process","root","Provider","value","MainNav_MainNav","Switch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e6169ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst link = {\n  normal: {\n    borderBottom: '1px dotted rgb(0, 168, 0)',\n  },\n  hover: {\n    borderBottom: '1px solid rgb(0, 168, 0)',\n    color: 'black',\n  },\n  active: 'hover',\n  touchActive: {\n    borderBottom: '1px dashed rgb(0, 168, 0)',\n    color: 'black',\n  },\n  focusFromTab: {\n    outline: '2px solid rgb(0, 152, 0)',\n    outlineOffset: '2px',\n    color: 'black',\n  },\n  touchActiveTapOnly: true,\n};\n\nconst childLink = {};\nObject.keys(link).forEach((key) => {\n  if (key !== 'touchActiveTapOnly') {\n    childLink[`onParent${key.slice(0, 1).toUpperCase()}${key.slice(1)}`] = link[key];\n  }\n});\n\nexport default {\n  link,\n  childLink,\n  p: {\n    margin: '3vh 0',\n    lineHeight: '1.4',\n  },\n};\n\nexport const Code = ({ children }) => (\n  <code\n    style={{\n      fontFamily: 'monospace',\n      fontSize: '15px',\n      paddingLeft: '2px',\n    }}\n  >{children}</code>\n);\n\nCode.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport const Li = ({ children, ...rest }) => (\n  <li\n    style={{\n      paddingLeft: '18px',\n      textIndent: '-15px',\n      margin: '0.5vh 0',\n      listStyle: 'none',\n    }}\n    {...rest}\n  >\n    <span style={{ paddingRight: '7px' }}>&ndash;</span>\n    {children}\n  </li>\n);\n\nLi.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n","import style from './style';\n\nconst s = Object.create(style);\n\ns.main = {\n  padding: '20px',\n};\n\nexport default s;\n","import React from 'react';\nimport s from 'styles/home.style';\n\nexport default function Home() {\n\n  return (\n    <div style={s.main}>\n      <p style={s.p}>\n        This is a test app. More to come.\n      </p>\n    </div>\n  );\n}\n","import style from './style';\n\nconst s = Object.create(style);\n\ns.main = {\n  padding: '20px',\n};\n\nexport default s;\n","import React from 'react';\r\nimport factions from 'data/factions';\r\nimport rules from 'data/rules';\r\nimport weapons from 'data/weapons';\r\nimport { get } from 'lodash';\r\n\r\nexport const DataContext = React.createContext();\r\n\r\nconst getUnitsByType = (faction, type) => (Object.values(factions[faction].units[type]));\r\n\r\nconst getWeapon = (name) => (weapons[name] || undefined);\r\n\r\nconst getResolvedUnitsByType = (faction, type) => {\r\n    const units = getUnitsByType(faction, type);\r\n    return units.map((unit) => ({\r\n        ...unit,\r\n        models: Object.values(get(unit, 'models', {})).map((model) => ({\r\n            ...model,\r\n            weapon: getWeapon(get(model, 'weapon', ''))\r\n        }))\r\n    }));\r\n};\r\n\r\nexport const Data = {\r\n    getFaction: (id) => (factions[id]),\r\n    getFactions: () => (Object.values(factions) || {}),\r\n    getRule: (name) => (rules[name] || {}),\r\n    getUnitsByType,\r\n    getResolvedUnitsByType\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../styles/exampleComponent.style';\r\nimport { Container, Col, Row } from 'reactstrap';\r\nimport { DataContext } from 'datalayer';\r\nimport { NavLink as RRNavLink } from 'react-router-dom';\r\n\r\nexport default class Factions extends React.Component {\r\n  static contextType = DataContext;\r\n  render() {\r\n    return (\r\n      <div style={s.main}>\r\n        <DataContext.Consumer>\r\n          {data => {\r\n            console.log(data);\r\n            return (\r\n              <div>\r\n                <h1>Factions</h1>\r\n                <Container>\r\n                  <Row className=\"justify-content-md-center\">\r\n                    {data.getFactions().map((faction) => (\r\n                      <Col sm=\"3\" style={{height: '300px', border: '1px solid black', margin: '5px', display: 'flex', alignItems: 'center', justifyContent: 'center'}} tag={RRNavLink} exact to={`/factions/${faction.id}`}>\r\n                        {faction.name}\r\n                      </Col>\r\n                    ))}\r\n                  </Row>\r\n                </Container>\r\n              </div>\r\n            );\r\n          }}\r\n        </DataContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport s from '../styles/exampleComponent.style';\r\nimport { DataContext } from 'datalayer';\r\n\r\nexport default class Units extends React.Component {\r\n  // Assign a contextType to read the current theme context.\r\n  // React will find the closest theme Provider above and use its value.\r\n  // In this example, the current theme is \"dark\".\r\n  static contextType = DataContext;\r\n  render() {\r\n    const { factionName } = this.props.match.params;\r\n    return (\r\n      <div style={s.main}>\r\n        <DataContext.Consumer>\r\n          {data => {\r\n            return (\r\n              <div>\r\n                <h2>{data.getFaction(factionName).name}</h2>\r\n                {data.getUnits(factionName).map((unit) => (\r\n                  <div>\r\n                    <p>{unit.name}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            );\r\n          }}\r\n        </DataContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { get } from 'lodash';\r\n\r\nexport default class UnitCard extends React.Component {\r\n    render() {\r\n      const { unit } = this.props;\r\n      return (\r\n          <div>\r\n            <p>{get(unit, 'name', '')}</p>\r\n            {Object.values(get(unit, 'models', {})).map((model) => (\r\n              <div>\r\n                <p>{JSON.stringify(model)}</p>\r\n                <p>{`${model.count}x ${model.name}`}</p>\r\n                <p>{JSON.stringify(model.weapon)}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport s from '../styles/exampleComponent.style';\r\nimport { Container, Col, Row, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { DataContext } from 'datalayer';\r\nimport { UnitCard } from 'components/UnitCard';\r\n\r\nexport default class List extends React.Component {\r\n  static contextType = DataContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      selectedUnit: null\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n      selectedUnit: null\r\n    }));\r\n  }\r\n\r\n  selectUnit = (unit) => {\r\n    this.setState({\r\n      selectedUnit: unit\r\n    });\r\n  }\r\n\r\n  renderAddHQ = (units) => {\r\n    const { selectedUnit } = this.state;\r\n    return (\r\n      <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n        <ModalHeader toggle={this.toggle}>{'Units'}</ModalHeader>\r\n        <ModalBody>\r\n          {selectedUnit ?\r\n            <UnitCard unit={selectedUnit} />\r\n              :\r\n            [...units, ...units, ...units].map((unit) => (\r\n              <div onClick={() => { this.selectUnit(unit)} }>{unit.name}</div>\r\n            ))\r\n          }\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button onClick={this.toggle}>Add</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { factionName } = this.props.match.params;\r\n    return (\r\n      <div style={s.main}>\r\n        <DataContext.Consumer>\r\n          {data => {\r\n            return (\r\n              <div>\r\n                {this.renderAddHQ(data.getResolvedUnitsByType(factionName, 'infantry'))}\r\n                <Container>\r\n                  <Row>\r\n                    <h2>HQ</h2>\r\n                    <Col>\r\n                        <Button color=\"danger\" onClick={this.toggle}>{'Add Unit'}</Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Container>\r\n              </div>\r\n            );\r\n          }}\r\n        </DataContext.Consumer>\r\n      </div>\r\n    );\r\n  }\r\n}","import style from './style';\n\nconst s = Object.create(style);\n\nexport default s;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Code } from '../styles/style';\nimport s from '../styles/pageNotFound.style';\n\nconst propTypes = {\n  location: PropTypes.object.isRequired,\n};\n\nexport default function PageNotFound({ location }) {\n  return (\n    <p style={s.p}>\n      Page not found - the path, <Code>{location.pathname}</Code>,\n      did not match any React Router routes.\n    </p>\n  );\n}\n\nPageNotFound.propTypes = propTypes;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport s from 'styles/style';\r\n\r\nconst breadCrumbTitles = {\r\n  '': 'Home',\r\n  factions: 'Factions',\r\n  'finland': 'Findland',\r\n};\r\n\r\nfunction BreadcrumbsItem({ match }) {\r\n  const title = breadCrumbTitles[match.url.split('/').slice(-1)];\r\n  const to = title === undefined ? '/' : match.url;\r\n\r\n  return (\r\n    <span>\r\n      <Link\r\n        {...s.link}\r\n        to={to}\r\n      >{title || 'Page Not Found'}</Link>\r\n      {!match.isExact && title && ' / '}\r\n      {title &&\r\n        <Route path={`${match.url === '/' ? '' : match.url}/:path`} component={BreadcrumbsItem} />\r\n      }\r\n    </span>\r\n  );\r\n}\r\n\r\nBreadcrumbsItem.propTypes = {\r\n  match: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default () => {\r\n  return (\r\n    <Route path=\"/\" component={BreadcrumbsItem} />\r\n  );\r\n};","import React from 'react';\r\nimport { Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink } from 'reactstrap';\r\nimport { NavLink as RRNavLink } from 'react-router-dom';\r\n\r\nexport default class MainNav extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.toggle = this.toggle.bind(this);\r\n      this.state = {\r\n        isOpen: false\r\n      };\r\n    }\r\n    toggle() {\r\n      this.setState({\r\n        isOpen: !this.state.isOpen\r\n      });\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n          <Navbar color=\"light\" light expand=\"md\">\r\n            <NavbarBrand tag={RRNavLink} exact to=\"/\" activeClassName=\"active\">BA Armybuilder</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavLink tag={RRNavLink} exact to=\"/factions\" activeClassName=\"active\">Factions</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink tag={RRNavLink} exact to=\"/list\" activeClassName=\"active\">List</NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Navbar>\r\n        </div>\r\n      );\r\n    }\r\n  }","import style from './style';\r\n\r\nconst s = Object.create(style);\r\n\r\ns.title = {\r\n  padding: '20px',\r\n};\r\n\r\ns.breadcrumbs = {\r\n    padding: '20px',\r\n};\r\n\r\nexport default s;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from 'routes/Home';\nimport Factions from 'routes/Factions';\nimport Units from 'routes/Units';\nimport List from 'routes/List';\nimport PageNotFound from 'routes/PageNotFound';\nimport { Breadcrumbs } from 'components/Breadcrumbs';\nimport { MainNav } from 'components/MainNav';\nimport s from 'styles/app.style';\nimport { DataContext, Data } from 'datalayer';\n\nexport default function App() {\n  return (\n    <div style={s.root}>\n      <DataContext.Provider value={Data}>\n        <MainNav />\n        <h1 style={s.title}>Single Page Apps for GitHub Pages</h1>\n        <nav style={s.breadcrumbs}>\n          <Breadcrumbs />\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/factions\" component={Factions} />\n          <Route exact path=\"/factions/:factionName\" component={Units} />\n          <Route exact path=\"/list/:factionName\" component={List} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </DataContext.Provider>\n    </div>\n  );\n}"],"sourceRoot":""}