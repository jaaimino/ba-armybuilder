{"version":3,"sources":["styles/style.js","styles/home.style.js","routes/Home.js","styles/exampleComponent.style.js","routes/Example.js","utils/db.js","styles/pageNotFound.style.js","routes/PageNotFound.js","components/Breadcrumbs.js","components/MainNav.js","styles/app.style.js","App.js","serviceWorker.js","index.js"],"names":["link","normal","borderBottom","hover","color","active","touchActive","focusFromTab","outline","outlineOffset","touchActiveTapOnly","childLink","Object","keys","forEach","key","concat","slice","toUpperCase","style","p","margin","lineHeight","Code","_ref","children","react_default","a","createElement","fontFamily","fontSize","paddingLeft","s","create","main","padding","Home","console","log","LokiContext","Example","Consumer","collections","units","find","map","unit","objectSpread","rules","list","collection","lookup","item","lookupObj","findOne","i","name","rule","text","React","Component","contextType","PageNotFound","location","style_Code","pathname","breadCrumbTitles","","example","two-deep","BreadcrumbsItem","match","title","url","split","to","undefined","Link","assign","isExact","Route","path","component","Breadcrumbs","MainNav","Navbar","fluid","staticTop","collapseOnSelect","Header","Brand","Toggle","Collapse","Nav","lib","NavItem","eventKey","breadcrumbs","db","loki","createContext","addCollection","insert","Boolean","window","hostname","ReactDOM","render","BrowserRouter","basename","process","root","Provider","value","Switch","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf968a2c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst link = {\n  normal: {\n    borderBottom: '1px dotted rgb(0, 168, 0)',\n  },\n  hover: {\n    borderBottom: '1px solid rgb(0, 168, 0)',\n    color: 'black',\n  },\n  active: 'hover',\n  touchActive: {\n    borderBottom: '1px dashed rgb(0, 168, 0)',\n    color: 'black',\n  },\n  focusFromTab: {\n    outline: '2px solid rgb(0, 152, 0)',\n    outlineOffset: '2px',\n    color: 'black',\n  },\n  touchActiveTapOnly: true,\n};\n\nconst childLink = {};\nObject.keys(link).forEach((key) => {\n  if (key !== 'touchActiveTapOnly') {\n    childLink[`onParent${key.slice(0, 1).toUpperCase()}${key.slice(1)}`] = link[key];\n  }\n});\n\nexport default {\n  link,\n  childLink,\n  p: {\n    margin: '3vh 0',\n    lineHeight: '1.4',\n  },\n};\n\nexport const Code = ({ children }) => (\n  <code\n    style={{\n      fontFamily: 'monospace',\n      fontSize: '15px',\n      paddingLeft: '2px',\n    }}\n  >{children}</code>\n);\n\nCode.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport const Li = ({ children, ...rest }) => (\n  <li\n    style={{\n      paddingLeft: '18px',\n      textIndent: '-15px',\n      margin: '0.5vh 0',\n      listStyle: 'none',\n    }}\n    {...rest}\n  >\n    <span style={{ paddingRight: '7px' }}>&ndash;</span>\n    {children}\n  </li>\n);\n\nLi.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n","import style from './style';\n\nconst s = Object.create(style);\n\ns.main = {\n  padding: '20px',\n};\n\nexport default s;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Code } from 'styles/style';\nimport s from 'styles/home.style';\n\nexport default function Home() {\n\n  return (\n    <div style={s.main}>\n      <p style={s.p}>\n        This is a test app. More to come.\n      </p>\n    </div>\n  );\n}\n","import style from './style';\n\nconst s = Object.create(style);\n\ns.main = {\n  padding: '20px',\n};\n\nexport default s;\n","import React from 'react';\nimport s from '../styles/exampleComponent.style';\nimport { LokiContext } from 'App';\nimport { refs } from 'utils/db';\nconsole.log(LokiContext);\n\nexport default class Example extends React.Component {\n  // Assign a contextType to read the current theme context.\n  // React will find the closest theme Provider above and use its value.\n  // In this example, the current theme is \"dark\".\n  static contextType = LokiContext;\n  render() {\n    return (\n      <div style={s.main}>\n        <LokiContext.Consumer>\n          {collections => {\n            const units = collections.units.find().map((unit) => ({\n                    ...unit,\n                    rules: refs(unit.rules, collections.rules, 'name')\n                  }));\n            return (\n              <div>\n                <h1>Dynamically Generated Content from Flat File data in LokiJS DB :O</h1>\n                {units.map((unit, i) => (\n                  <div>\n                    <h1>{unit.name}</h1>\n                    {unit.rules.map((rule, i) => (\n                      <div>\n                        <h3>{rule.name}</h3>\n                        <p>{rule.text}</p>\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            );\n          }}\n        </LokiContext.Consumer>\n      </div>\n    );\n  }\n}\n","export const refs = (list, collection, lookup) => {\r\n    return list.map((item) => {\r\n        const lookupObj = {};\r\n        lookupObj[lookup] = item;\r\n        console.log(list);\r\n        const lookedUpItem = collection.findOne(lookupObj);\r\n        return lookedUpItem;\r\n    });\r\n}","import style from './style';\n\nconst s = Object.create(style);\n\nexport default s;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Code } from '../styles/style';\nimport s from '../styles/pageNotFound.style';\n\nconst propTypes = {\n  location: PropTypes.object.isRequired,\n};\n\nexport default function PageNotFound({ location }) {\n  return (\n    <p style={s.p}>\n      Page not found - the path, <Code>{location.pathname}</Code>,\n      did not match any React Router routes.\n    </p>\n  );\n}\n\nPageNotFound.propTypes = propTypes;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport s from 'styles/style';\r\n\r\nconst breadCrumbTitles = {\r\n  '': 'Home',\r\n  example: 'Example',\r\n  'two-deep': 'Two Deep',\r\n};\r\n\r\nfunction BreadcrumbsItem({ match }) {\r\n  const title = breadCrumbTitles[match.url.split('/').slice(-1)];\r\n  const to = title === undefined ? '/' : match.url;\r\n\r\n  return (\r\n    <span>\r\n      <Link\r\n        {...s.link}\r\n        to={to}\r\n      >{title || 'Page Not Found'}</Link>\r\n      {!match.isExact && title && ' / '}\r\n      {title &&\r\n        <Route path={`${match.url === '/' ? '' : match.url}/:path`} component={BreadcrumbsItem} />\r\n      }\r\n    </span>\r\n  );\r\n}\r\n\r\nBreadcrumbsItem.propTypes = {\r\n  match: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function Breadcrumbs() {\r\n  return (\r\n    <Route path=\"/\" component={BreadcrumbsItem} />\r\n  );\r\n}","import React from 'react';\r\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default () => (\r\n    <Navbar fluid staticTop collapseOnSelect>\r\n        <Navbar.Header>\r\n            <Navbar.Brand>\r\n                <Link to=\"/\">Bolt Action Army Builder</Link>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n        </Navbar.Header>\r\n        <Navbar.Collapse>\r\n            <Nav>\r\n            <LinkContainer to=\"/example\">\r\n                <NavItem eventKey={1}>Example</NavItem>\r\n            </LinkContainer>\r\n            {/* <NavDropdown eventKey={3} title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                <MenuItem eventKey={3.1}>Action</MenuItem>\r\n                <MenuItem eventKey={3.2}>Another action</MenuItem>\r\n                <MenuItem eventKey={3.3}>Something else here</MenuItem>\r\n                <MenuItem divider />\r\n                <MenuItem eventKey={3.3}>Separated link</MenuItem>\r\n            </NavDropdown> */}\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n    </Navbar>\r\n)","import style from './style';\r\n\r\nconst s = Object.create(style);\r\n\r\ns.title = {\r\n  padding: '20px',\r\n};\r\n\r\ns.breadcrumbs = {\r\n    padding: '20px',\r\n};\r\n\r\nexport default s;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from 'routes/Home';\nimport Example from 'routes/Example';\nimport PageNotFound from 'routes/PageNotFound';\nimport Breadcrumbs from 'components/Breadcrumbs';\nimport MainNav from 'components/MainNav';\nimport s from 'styles/app.style';\nimport loki from 'lokijs';\nimport units from 'data/units';\nimport rules from 'data/rules';\n\nconst db = new loki('sandbox.db');\nexport const LokiContext = React.createContext();\n\n// Make our collections\nconst collections = {};\ncollections.units = db.addCollection('units');\ncollections.rules = db.addCollection('rules');\n\n// Populate with JSON seeds\ncollections.units.insert(units);\ncollections.rules.insert(rules);\n\nexport default function App() {\n  return (\n    <div style={s.root}>\n      <LokiContext.Provider value={collections}>\n        <MainNav />\n        <h1 style={s.title}>Single Page Apps for GitHub Pages</h1>\n        <nav style={s.breadcrumbs}>\n          <Breadcrumbs />\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/example\" component={Example} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </LokiContext.Provider>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}