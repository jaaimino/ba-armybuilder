{"version":3,"sources":["routes/index.js","routes/test.js","router.js","components/drawer.js","components/app-bar.js","App.js","serviceWorker.js","index.js"],"names":["Index","react_default","a","createElement","Component","Test","AppRouter","BrowserRouter","Switch","Route","path","exact","component","TemporaryDrawer","classes","this","props","sideList","className","list","List_default","NavLink","to","activeClassName","ListItem_default","button","ListItemIcon_default","MoveToInbox_default","ListItemText_default","primary","Drawer_default","open","onClose","tabIndex","role","onClick","onKeyDown","React","withStyles","width","fullList","root","flexGrow","grow","menuButton","marginLeft","marginRight","onOpenSidebar","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","Button_default","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","drawerOpen","_this2","Fragment","CssBaseline_default","app_bar","setState","drawer","router","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24235fad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <h1>Index</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;","import React, { Component } from 'react';\r\n\r\nclass Test extends Component {\r\n  render() {\r\n    return (\r\n      <h1>Test</h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Index from 'routes/index';\r\nimport Test from 'routes/test';\r\n\r\nconst AppRouter = () => (\r\n  <Router>\r\n    <Switch>\r\n        <Route path=\"/\" exact component={Index} />\r\n        <Route path=\"/test\" exact component={Test} />\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default AppRouter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n};\r\n\r\nclass TemporaryDrawer extends React.Component {\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const sideList = (\r\n      <div className={classes.list}>\r\n        <List>\r\n            <NavLink to=\"/\" activeClassName=\"hurray\">\r\n                <ListItem button>\r\n                <ListItemIcon><InboxIcon /></ListItemIcon>\r\n                <ListItemText primary={'Home'} />\r\n                </ListItem>\r\n            </NavLink>\r\n            <NavLink to=\"/test\" activeClassName=\"hurray\">\r\n                <ListItem button>\r\n                <ListItemIcon><InboxIcon /></ListItemIcon>\r\n                <ListItemText primary={'Test'} />\r\n                </ListItem>\r\n            </NavLink>\r\n        </List>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Drawer open={this.props.open} onClose={this.props.onClose}>\r\n                <div\r\n                    tabIndex={0}\r\n                    role=\"button\"\r\n                    onClick={this.props.onClose}\r\n                    onKeyDown={this.props.onClose}\r\n                >\r\n                    {sideList}\r\n                </div>\r\n                </Drawer>\r\n            </div>\r\n        </Router>\r\n    );\r\n  }\r\n}\r\n\r\nTemporaryDrawer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(TemporaryDrawer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n};\r\n\r\nfunction ButtonAppBar(props) {\r\n  const { classes, onOpenSidebar } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n    <AppBar position=\"static\">\r\n        <Toolbar>\r\n        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\" onClick={onOpenSidebar}>\r\n            <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            News\r\n        </Typography>\r\n        <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n    </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nButtonAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ButtonAppBar);","import React, { Component } from 'react';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppRouter from 'router';\nimport TemporaryDrawer from 'components/drawer.js';\nimport AppBar from 'components/app-bar.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawerOpen: false\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <AppBar\n          onOpenSidebar={() => {\n            this.setState({drawerOpen: true})\n          }}\n        />\n        <TemporaryDrawer\n          open={this.state.drawerOpen}\n          onClose={() => {\n            this.setState({drawerOpen: false})\n          }}\n        />\n        <AppRouter />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}